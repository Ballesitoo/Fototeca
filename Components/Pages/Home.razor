@page "/"

@using Microsoft.AspNetCore.Components.Web

@using System;
@using System.IO;
@using System.Net.Http;
@using System.Net.Http.Headers;
@using System.Text;
@using System.Threading.Tasks;
@using System.IO.Compression;
@using LaFototeca.Entidades
@inject AlertService alertService
@inject ShapefileService shapefileService

@using System.Diagnostics;
@using System.Text.Json;

@inject NavigationManager Navigation

@inject IJSRuntime JS

<PageTitle>Fototeca</PageTitle>

<!-- Mapa -->
<div id="map" style="height: 768px; width: 100%;"></div>

<!-- Botón para abrir el panel -->
<button class="btn btn-primary position-fixed start-0 m-3" type="button"
        style="top: 50px;"
        @onclick="ToggleSidePanel">
    <img src="images/search-results_16262362.png" alt="Fotogramas" style="width: 30px; height: auto;">
</button>

<!-- Panel lateral -->
<div class="offcanvas offcanvas-start @(showSidePanel ? "show" : "")"
     tabindex="-1" id="sidePanel" aria-labelledby="sidePanelLabel"
     style="visibility:@(showSidePanel ? "visible" : "hidden"); background-color: white; transition: transform 0.3s ease-in-out;">
    <div class="offcanvas-header">
        <h5 class="offcanvas-title" id="sidePanelLabel">Fotogramas mostrados</h5>
        <button type="button" class="btn-close" aria-label="Close" @onclick="CloseSidePanel"></button>
    </div>
    <div class="offcanvas-body">
        <ul class="list-group">
            <li class="list-group-item">
                <div class="row align-items-center">
                    <div class="col">
                        <input class="form-check-input" type="checkbox" id="selectAllCheckbox" @onchange="ToggleSelectAll" />
                    </div>
                    <div class="col">
                        <span>Fotogramas</span>
                    </div>
                    <div class="col">
                        <span>Acciones</span>
                    </div>
                </div>
            </li>
            @foreach (var fotograma in fotogramas)
            {
                <li class="list-group-item">
                    <div class="row align-items-center">
                        <div class="col">
                            <input class="form-check-input" type="checkbox" @bind="fotograma.Seleccionado" />
                        </div>
                        <div class="col-auto">
                            @fotograma.Location.Replace(".jpg", "")
                        </div>
                        <div class="col-auto">
                            <button class="btn btn-sm btn-outline-secondary me-1" @onclick="() => ToggleVisibility(fotograma)">@(fotograma.Visible ? "🚫" : "👁️")</button>
                            <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => ZoomToImage(fotograma)">🔍</button>
                            <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteFotograma(fotograma)">🗑️</button>
                        </div>
                    </div>
                </li>
            }
        </ul>
    </div>
    <button class="btn btn-success m-3" @onclick="DescargarFotogramas">Descargar</button>
</div>

<!-- Mini panel con los vuelos disponibles de X año -->
@if (añoSeleccionado.HasValue && vuelosDelAñoActual?.Any() == true)
{
    <div class="panel-vuelos bg-white shadow border rounded p-2 mt-2">
        <h6>Vuelos disponibles en @añoSeleccionado</h6>
        <ul class="list-group">
            @foreach (var vuelo in vuelosDelAñoActual!)
            {
                <li class="list-group-item list-group-item-action vuelo"
                    @onclick="() => SeleccionarVuelo(vuelo)">
                    @vuelo.Nombre
                </li>
            }
        </ul>
    </div>
}

<!-- Botones con los años de vuelos disponibles -->
<div class="slider-anios d-flex justify-content-center flex-wrap p-2 bg-light">
    @foreach (var año in vuelosPorAnio.Keys.OrderBy(x => x))
    {
        <button class="btn btn-outline-primary m-1"
                @onclick="() => MostrarVuelosDelAño(año)">
            @año
        </button>
    }
</div>

@code {
    //await alertService.ShowAlert($"Coso.", "Cosito");

    private bool showSidePanel = false;
    List<Vuelo>? vuelosDelAñoActual;
    int? añoSeleccionado;

    private string nombre_vuelo = string.Empty;

    void MostrarVuelosDelAño(int año)
    {
        añoSeleccionado = año;
        vuelosDelAñoActual = vuelosPorAnio[año];
    }

    public async Task SeleccionarVuelo(Vuelo vuelo)
    {
        fotogramas = new List<Fotograma>();

        vuelosDelAñoActual = null;
        añoSeleccionado = null;
        //Console.WriteLine($"Vuelo seleccionado: {vuelo.Nombre}");

        nombre_vuelo = vuelo.Nombre;

        //  Aqui lo suyo ahora (TENIENDO EN CUENTA QUE DE FORMA DEFAULT NO ENSEÑE NINGUN VUELO, EN EL SENTIDO DE QUE NO HAYA CENTROIDES NI POLIGONOS) seria mandar desde aqui el nombre del vuelo para que en el js
        //  cambie su layer de centroides, poligonos y mosaico, para asi mostrar el vuelo correspondiente
        try
        {
            await JS.InvokeVoidAsync("MapaInterop.ClickVueloSeleccionado", vuelo.Nombre);
        }
        catch(Exception e)
        {
            await alertService.ShowAlert($"Error al seleccionar un vuelo: {e.Message}", "Error en seleccion de vuelo");
        }
    }

    Dictionary<int, List<Vuelo>> vuelosPorAnio = new Dictionary<int, List<Vuelo>>();

    private void ToggleSidePanel()
    {
        showSidePanel = !showSidePanel;
    }

    private void CloseSidePanel()
    {
        showSidePanel = false;
    }

    private DotNetObjectReference<Home>? objRef;

    public List<Fotograma> fotogramas = new List<Fotograma>();

    protected override async Task OnInitializedAsync()
    {
        using var client = new HttpClient();
        var auth = Convert.ToBase64String(Encoding.ASCII.GetBytes("admin:geoserver"));
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Basic", auth);
        HttpResponseMessage? response = null;
        var nombresUnicos = new Dictionary<string, string>();

        try
        {
            response = await client.GetAsync("http://192.168.1.60:8090/geoserver/rest/workspaces/fototeca/coverages.json");
        }
        catch(Exception e)
        {
            alertService.ShowAlert($"Error en la peticion para obtener las capas, ponte en contacto con administrador: {e.Message}", "Error en obtencion de capas");
            Navigation.NavigateTo("/", true);
        }

        var json = await response.Content.ReadAsStringAsync();
        var coverages = JsonDocument.Parse(json)
            .RootElement.GetProperty("coverages")
            .GetProperty("coverage")
            .EnumerateArray();
        
        foreach (var coverage in coverages)
        {
            var fullName = coverage.GetProperty("name").GetString();
            
            //var cleanName = fullName.Split(':')[1];
            //Console.WriteLine($"nombree: {fullName}");
            int index = fullName.LastIndexOf('_');
            var nombre = fullName.Substring(0, index);

            try
            {
                var responseDetalle = await client.GetAsync($"http://192.168.1.60:8090/geoserver/rest/workspaces/fototeca/coverages/{fullName}.json");
                var detalleJson = await responseDetalle.Content.ReadAsStringAsync();
                var detalle = JsonDocument.Parse(detalleJson);
                var nativeName = detalle.RootElement.GetProperty("coverage").GetProperty("nativeName").GetString();

                if (!nombresUnicos.ContainsKey(nombre))
                {
                    nombresUnicos[nombre] = nativeName;
                }
            }
            catch(Exception e)
            {
                alertService.ShowAlert($"Error en la peticion para obtener la info detallada de la capa de {nombre}, ponte en contacto con administrador: {e.Message}", "Error en obtencion de capas");
                Navigation.NavigateTo("/", true);
            }
        }

        foreach (var nombreUnico in nombresUnicos)
        {
            var nombre = nombreUnico.Key;        // Nombre de la capa
            var nativeName = nombreUnico.Value;  // NativeName (como el id)

            // Sacar el año de los primeros 4 caracteres
            if (!int.TryParse(nombre.Substring(0, 4), out int any)) 
                continue; // Si no se puede, saltar

            var vuelo = new Vuelo
            {
                NativeName = nativeName,
                Any = any,
                Nombre = nombre
            };

            if (!vuelosPorAnio.ContainsKey(any))
                vuelosPorAnio[any] = new List<Vuelo>();

            // Evitar duplicados si quieres
            if (!vuelosPorAnio[any].Any(v => v.Nombre == nombre))
                vuelosPorAnio[any].Add(vuelo);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                objRef = DotNetObjectReference.Create(this);
                await JS.InvokeVoidAsync("mapApp.initMap", "map", objRef);
            }
            catch(Exception e)
            {
                alertService.ShowAlert($"Error en la inicializacion del mapa base o en la obtencion de la foto, ponte en contacto con administrador: {e.Message}", "Error en obtencion de capas");
                Navigation.NavigateTo("/", true);
            }
        }
    }

    /*protected override void OnInitialized()
    {
        MapService.Instance.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        MapService.Instance.OnChange -= StateHasChanged;
        objRef?.Dispose();
    }*/

    [JSInvokable("Click")]
    public Task Click(string location, int id)
    {
        //Console.WriteLine("Evento click llegado al blazor");
        //Console.WriteLine($"ID click: {id}");
        //Console.WriteLine($"Location click: {location}");

        if (!fotogramas.Any(img => img.Id == id))
        {
            fotogramas.Add(new Fotograma
            {
                Location = location,
                Id = id
            });
            StateHasChanged();  // Para que Blazor refresque la UI
        }
        //Console.WriteLine($"Num de imagenes: {fotogramas.Count()}");
        return Task.CompletedTask;
    }

    //  Cuidado no borrar, corresponde al .js por si acaso se utiliza
/*
    [JSInvokable("HoverCentroide")]
    public Task HoverCentroide(string location, int id)
    {
        //Console.WriteLine("Evento hover llegado al blazor");
        //Console.WriteLine($"ID hover: {id}");
        //Console.WriteLine($"Location hover: {location}");


        /*if (!imagenes.Any(img => img.Id == id))
        {
            imagenes.Add(new Imagen
            {
                Location = location,
                Id = id
            });
            StateHasChanged();  // Para que Blazor refresque la UI
        }
        //Console.WriteLine($"Num de imagenes: {imagenes.Count()}");
        return Task.CompletedTask;
    }
*/
    private async Task ToggleVisibility(Fotograma fotograma)
    {
        // Puedes llamar a JS: JS.InvokeVoidAsync("mapApp.toggleVisibility", fotograma.Nombre);
        //Console.WriteLine($"Toggle {fotograma.Location}");

        try
        {
            fotograma.Visible = !fotograma.Visible;
            await JS.InvokeVoidAsync("MapaInterop.toggleLayerVisibility", fotograma.Location);
        }
        catch(Exception e)
        {
            await alertService.ShowAlert($"Error al querer cambiar la visibilidad de {fotograma.Location}: {e.Message}", "Error en cambiar visibilidad");
            //Navigation.NavigateTo("/", true);
        }
    }

    private async Task ZoomToImage(Fotograma fotograma)
    {
        // Puedes llamar a JS: JS.InvokeVoidAsync("mapApp.zoomTo", fotograma.Nombre);
        //Console.WriteLine($"Zoom to {fotograma.Location}");

        try
        {
            await JS.InvokeVoidAsync("MapaInterop.ZoomToImage", fotograma.Id);
        }
        catch(Exception e)
        {
            await alertService.ShowAlert($"Error al querer hacer zoom a {fotograma.Location}: {e.Message}", "Error en hacer zoom");
            //Navigation.NavigateTo("/", true);
        }
    }

    private async Task DeleteFotograma(Fotograma fotograma)
    {
        // MapService.Instance.DeleteFotograma(fotograma);
        //Console.WriteLine($"Delete {fotograma.Location}");

        try
        {
            fotogramas.Remove(fotograma);
            await JS.InvokeVoidAsync("MapaInterop.DeleteFotograma", fotograma.Location, fotograma.Id);
        }
        catch(Exception e)
        {
            await alertService.ShowAlert($"Error al querer eliminar el fotograma {fotograma.Location}: {e.Message}", "Error en eliminar el fotograma");
            //Navigation.NavigateTo("/", true);
        }
    }

    private void ToggleSelectAll(ChangeEventArgs e)
    {
        bool isChecked = e.Value as bool? ?? false;
        foreach(var f in fotogramas)
        {
            f.Seleccionado = isChecked;
        }
    }

    private async Task DescargarFotogramas()
    {
        List<String> locations = fotogramas
            .Where(f => f.Seleccionado)
            .Select(f => f.Location)
            .ToList();

        if (locations.Count == 0)
        {
            Console.WriteLine("No hay fotogramas seleccionados.");
            return;
        }

        string? nombreX = locations.FirstOrDefault();
        string? carpetaRelativa = BuscarCarpeta(nombreX);


        /*Console.WriteLine($"El primero de locations: {nombreX}");
        Console.WriteLine($"Nombre carpeta: {nombre_vuelo}");
        Console.WriteLine($"Carpeta relativa: {carpetaRelativa}");*/

        /*var vuelo = vuelosPorAnio.Values.SelectMany(v => v).FirstOrDefault(v => v.Nombre == nombre_vuelo);
        string? nativeNamee = vuelo?.NativeName;
        Console.WriteLine(nativeNamee);*/
        try
        {
            await JS.InvokeVoidAsync("MapaInterop.DescargarFotogramas", locations, carpetaRelativa);
        }
        catch(Exception e)
        {
            await alertService.ShowAlert($"Error al descargar el zip con los fotogramas: {e.Message}", "Error en descargar fotogramas");
            //Navigation.NavigateTo("/", true);
        }
    }

    public string? BuscarCarpeta(string nombreArchivo)
    {
        string baseDir = "/var/www/html/fototeca/images";
        string baseUrl = "http://192.168.1.60:8081/fototeca/images";

        foreach (var archivo in Directory.EnumerateFiles(baseDir, "*", SearchOption.AllDirectories))
        {
            if (Path.GetFileName(archivo) == nombreArchivo)
            {
                // Obtiene la carpeta relativa que contiene el archivo
                var relativeDir = Path.GetRelativePath(baseDir, Path.GetDirectoryName(archivo)!)
                          .Replace("\\", "/");
                return $"{baseUrl}/{relativeDir}";
            }
        }
        return null; // no encontrado
    }

    public class Fotograma
    {
        public string Location { get; set; } = string.Empty;
        public int Id { get;set; }
        public bool Visible {get; set;} = false;
        public bool Seleccionado {get; set;} =  false;
    }

    public class Vuelo
    {
        public required string NativeName {get; set; }
        public required string Nombre { get; set; }
        public required int Any { get; set; }
    }
}